// üìÅ /js/auth.js
// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Telegram Mini App (–±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π/–ø–∞—Ä–æ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏)

class AuthSystem {
  constructor() {
    this.currentUser = null;
    this.isAuthenticated = false;
    this.requiredRoles = [];
    this.onAuthSuccess = null;
    this.onAuthFail = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * @param {string[]} requiredRoles - –ú–∞—Å—Å–∏–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   * @param {Function} onSuccess - –ö–æ–ª–±—ç–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * @param {Function} onFail - –ö–æ–ª–±—ç–∫ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  async init(requiredRoles = [], onSuccess = null, onFail = null) {
    console.log('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AuthSystem –¥–ª—è —Ä–æ–ª–µ–π:', requiredRoles);

    this.requiredRoles = requiredRoles;
    this.onAuthSuccess = onSuccess;
    this.onAuthFail = onFail;

    try {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∏–∑ Telegram WebApp
      if (!this.isTelegramWebApp()) {
        throw new Error('–î–æ—Å—Ç—É–ø –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Telegram Mini App');
      }

      console.log('üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω Telegram WebApp');
      const user = await this.initTelegramAuth();

      if (this.onAuthSuccess) this.onAuthSuccess(user);
      return user;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      if (this.onAuthFail) this.onAuthFail(error);
      else this.showAuthError(error.message);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ Telegram WebApp
   */
  isTelegramWebApp() {
    return !!(window.Telegram?.WebApp?.initDataUnsafe?.user);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram WebApp
   */
  async initTelegramAuth() {
    const telegramUser = this.getTelegramUser();

    if (!telegramUser || !telegramUser.id) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å —á–µ—Ä–µ–∑ API
    const userRole = await this.checkUserRole(telegramUser.id);
    if (!userRole) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if (!this.hasAccess(userRole.role)) {
      throw new Error(
        `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: ${this.requiredRoles.join(' –∏–ª–∏ ')}, —É –≤–∞—Å: ${userRole.role}`
      );
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.currentUser = {
      ...telegramUser,
      ...userRole,
      authenticatedAt: Date.now(),
      authMethod: 'telegram',
    };

    this.isAuthenticated = true;
    console.log('‚úÖ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', this.currentUser);
    return this.currentUser;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
   */
  getTelegramUser() {
    try {
      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.ready();
        window.Telegram.WebApp.expand();

        const user = window.Telegram.WebApp.initDataUnsafe?.user;
        if (user) {
          return {
            id: user.id,
            telegram_id: user.id,
            first_name: user.first_name,
            last_name: user.last_name,
            username: user.username,
            language_code: user.language_code,
          };
        }
      }
      throw new Error('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ backend
   */
  async checkUserRole(telegramId) {
    try {
      const response = await fetch('/api/user-role', {
        headers: { 'x-telegram-id': telegramId.toString() },
      });

      if (!response.ok) {
        if (response.status === 403) throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const userData = await response.json();
      console.log('üë§ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–∞:', userData);
      return userData;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª–∏
   */
  hasAccess(userRole) {
    if (this.requiredRoles.length === 0) return true;
    return this.requiredRoles.includes(userRole);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getCurrentUser() {
    return this.currentUser;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  isAuth() {
    return this.isAuthenticated && this.currentUser !== null;
  }

  /**
   * –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  getApiHeaders() {
    if (!this.isAuth()) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    // –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Telegram ID
    return {
      'x-telegram-id': this.currentUser.telegram_id.toString(),
      'Content-Type': 'application/json',
    };
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
   */
  async apiRequest(url, options = {}) {
    if (!this.isAuth()) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    const headers = {
      ...this.getApiHeaders(),
      ...(options.headers || {}),
    };

    return fetch(url, { ...options, headers });
  }

  /**
   * –õ–æ–≥–∞—É—Ç (–±–µ–∑ localStorage –∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Å–µ—Å—Å–∏–π)
   */
  logout() {
    this.currentUser = null;
    this.isAuthenticated = false;
    console.log('üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    window.location.reload();
  }

  /**
   * –≠–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  showAuthError(message) {
    document.body.innerHTML = `
      <div class="auth-error-screen">
        <div class="auth-error-card">
          <div class="auth-error-icon">üö´</div>
          <h2 class="auth-error-title">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
          <p class="auth-error-message">${message}</p>
          <div class="auth-error-actions">
            <button onclick="window.location.reload()" class="auth-error-btn">üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
            <button onclick="window.history.back()" class="auth-error-btn secondary">‚Üê –ù–∞–∑–∞–¥</button>
          </div>
          <div class="auth-error-help">
            <p>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? <a href="https://t.me/hanna_teaches" target="_blank">–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</a></p>
          </div>
        </div>
      </div>
    `;

    const style = document.createElement('style');
    style.textContent = `
      .auth-error-screen {
        position: fixed; inset: 0;
        background: var(--bg-color, #fff);
        display: flex; align-items: center; justify-content: center;
        padding: 2rem;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
      }
      .auth-error-card {
        background: var(--card-bg, #f8f9fa);
        border-radius: 16px;
        padding: 3rem 2rem;
        text-align: center;
        max-width: 400px; width: 100%;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        border: 1px solid var(--border-color, #e0e0e0);
      }
      .auth-error-icon { font-size: 4rem; margin-bottom: 1.5rem; }
      .auth-error-title { color: var(--error-color, #dc3545); margin: 0 0 1rem; font-size: 1.5rem; font-weight: 600; }
      .auth-error-message { color: var(--text-color, #202124); margin: 0 0 2rem; line-height: 1.5; }
      .auth-error-actions { display: flex; gap: 1rem; margin-bottom: 2rem; flex-wrap: wrap; }
      .auth-error-btn {
        flex: 1; min-width: 120px;
        background: var(--accent-color, #007aff); color: #fff;
        border: none; border-radius: 8px; padding: 12px 20px;
        font-size: 14px; font-weight: 500; cursor: pointer; transition: opacity .2s;
      }
      .auth-error-btn:hover { opacity: .9; }
      .auth-error-btn.secondary {
        background: var(--card-bg, #f8f9fa); color: var(--text-color, #202124);
        border: 1px solid var(--border-color, #e0e0e0);
      }
      .auth-error-help { font-size: 12px; color: var(--text-color, #202124); opacity: .7; }
      .auth-error-help a { color: var(--accent-color, #007aff); text-decoration: none; }
      .auth-error-help a:hover { text-decoration: underline; }
      @media (max-width: 480px) {
        .auth-error-card { padding: 2rem 1rem; }
        .auth-error-actions { flex-direction: column; }
      }
    `;
    document.head.appendChild(style);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ helper
window.AuthSystem = AuthSystem;
window.initAuth = async function (requiredRoles, onSuccess, onFail) {
  const auth = new AuthSystem();
  return auth.init(requiredRoles, onSuccess, onFail);
};

console.log('‚úÖ AuthSystem (Telegram-only) –∑–∞–≥—Ä—É–∂–µ–Ω');
