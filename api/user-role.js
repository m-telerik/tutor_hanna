// üìÅ /api/user-role.js
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const ADMIN_IDS = [618647337, 2341205];

export default async function handler(req, res) {
  const telegram_id = parseInt(req.headers["x-telegram-id"]);
  
  if (!telegram_id) {
    return res.status(400).json({ error: 'Missing telegram_id' });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ
  if (ADMIN_IDS.includes(telegram_id)) {
    return res.status(200).json({ 
      role: 'admin',
      telegram_id 
    });
  }

  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
  const { data: user, error } = await supabase
    .from('hanna_users')
    .select('id, name, languages, role, is_active, preferred_days, preferred_time')
    .eq('telegram_id', telegram_id)
    .single();

  if (error && error.code !== 'PGRST116') {
    return res.status(500).json({ error: error.message });
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç
  if (!user) {
    return res.status(200).json({ 
      role: 'prospect',
      telegram_id 
    });
  }

  // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç
  if (user.role === 'student' && user.is_active) {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π
    const { data: nextSession } = await supabase
      .from('hanna_sessions')
      .select('id, session_datetime, status, type')
      .eq('user_id', user.id)
      .gte('session_datetime', new Date().toISOString())
      .order('session_datetime', { ascending: true })
      .limit(1)
      .single();

    const response = {
      role: 'student',
      telegram_id,
      name: user.name,
      languages: user.languages,
      preferred_days: user.preferred_days,
      preferred_time: user.preferred_time
    };

    if (nextSession) {
      response.next_session = {
        session_id: nextSession.id,
        date: new Date(nextSession.session_datetime).toLocaleString('ru-RU', {
          timeZone: 'Asia/Bangkok',
          year: 'numeric',
          month: '2-digit', 
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit'
        }),
        datetime: nextSession.session_datetime,
        status: nextSession.status,
        type: nextSession.type,
        language: Array.isArray(user.languages) ? user.languages.join(', ') : user.languages
      };
    }

    return res.status(200).json(response);
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –¥—Ä—É–≥—É—é —Ä–æ–ª—å
  return res.status(200).json({ 
    role: 'prospect',
    telegram_id 
  });
}
