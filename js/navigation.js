// üìÅ /js/navigation.js
// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π

class NavigationSystem {
  constructor() {
    this.currentUser = null;
    this.currentSection = 'overview';
    this.sections = {};
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
   * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é
   * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
   */
  init(user, containerId = 'navigation-container') {
    this.currentUser = user;
    this.container = document.getElementById(containerId);
    
    if (!this.container) {
      console.warn('‚ö†Ô∏è Navigation container not found:', containerId);
      return;
    }

    this.setupSections();
    this.render();
    this.bindEvents();
    
    console.log('‚úÖ Navigation system initialized for role:', user.role);
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–∫—Ü–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
   */
  setupSections() {
    const role = this.currentUser?.role;

    switch (role) {
      case 'student':
        this.sections = {
          overview: {
            id: 'overview',
            title: '–û–±–∑–æ—Ä',
            icon: 'üìä',
            description: '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
          },
          lessons: {
            id: 'lessons',
            title: '–ú–æ–∏ —É—Ä–æ–∫–∏',
            icon: 'üìö',
            description: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–Ω—è—Ç–∏–π'
          },
          vocabulary: {
            id: 'vocabulary',
            title: '–°–ª–æ–≤–∞—Ä—å',
            icon: 'üìù',
            description: '–ò–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã'
          },
          progress: {
            id: 'progress',
            title: '–ü—Ä–æ–≥—Ä–µ—Å—Å',
            icon: 'üìà',
            description: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è'
          },
          homework: {
            id: 'homework',
            title: '–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
            icon: '‚úèÔ∏è',
            description: '–¢–µ–∫—É—â–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è'
          }
        };
        break;

      case 'tutor':
        this.sections = {
          dashboard: {
            id: 'dashboard',
            title: '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            icon: 'üéØ',
            description: '–û–±—â–∏–π –æ–±–∑–æ—Ä –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
          },
          students: {
            id: 'students',
            title: '–°—Ç—É–¥–µ–Ω—Ç—ã',
            icon: 'üë•',
            description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏'
          },
          schedule: {
            id: 'schedule',
            title: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
            icon: 'üìÖ',
            description: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏'
          },
          recurring: {
            id: 'recurring',
            title: '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è',
            icon: 'üîÑ',
            description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —É—Ä–æ–∫–æ–≤'
          },
          materials: {
            id: 'materials',
            title: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã',
            icon: 'üìö',
            description: '–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–µ—Å—É—Ä—Å—ã'
          },
          analytics: {
            id: 'analytics',
            title: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
            icon: 'üìä',
            description: '–û—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
          }
        };
        break;

      case 'admin':
        this.sections = {
          overview: {
            id: 'overview',
            title: '–û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã',
            icon: 'üè†',
            description: '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã'
          },
          users: {
            id: 'users',
            title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            icon: 'üë§',
            description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'
          },
          tutors: {
            id: 'tutors',
            title: '–¢—å—é—Ç–æ—Ä—ã',
            icon: 'üë©‚Äçüè´',
            description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏'
          },
          students: {
            id: 'students',
            title: '–°—Ç—É–¥–µ–Ω—Ç—ã',
            icon: 'üßë‚Äçüéì',
            description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏'
          },
          sessions: {
            id: 'sessions',
            title: '–ó–∞–Ω—è—Ç–∏—è',
            icon: 'üìö',
            description: '–í—Å–µ –∑–∞–Ω—è—Ç–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ'
          },
          chat_history: {
            id: 'chat_history',
            title: '–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤',
            icon: 'üí¨',
            description: '–î–∏–∞–ª–æ–≥–∏ —Å –∞–≥–µ–Ω—Ç–∞–º–∏'
          },
          settings: {
            id: 'settings',
            title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
            icon: '‚öôÔ∏è',
            description: '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
          }
        };
        break;

      default:
        this.sections = {
          overview: {
            id: 'overview',
            title: '–ì–ª–∞–≤–Ω–∞—è',
            icon: 'üè†',
            description: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
          }
        };
    }
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
   */
  render() {
    const sectionsArray = Object.values(this.sections);
    
    this.container.innerHTML = `
      <div class="navigation-panel">
        <div class="nav-tabs">
          ${sectionsArray.map(section => `
            <button 
              class="nav-tab ${section.id === this.currentSection ? 'active' : ''}" 
              data-section="${section.id}"
              title="${section.description}"
            >
              <span class="nav-icon">${section.icon}</span>
              <span class="nav-title">${section.title}</span>
            </button>
          `).join('')}
        </div>
      </div>
      
      <div class="nav-content">
        ${sectionsArray.map(section => `
          <div 
            class="nav-section ${section.id === this.currentSection ? 'active' : ''}" 
            id="${section.id}-section"
            data-section="${section.id}"
          >
            <div class="section-placeholder">
              <div class="placeholder-icon">${section.icon}</div>
              <h3>${section.title}</h3>
              <p>${section.description}</p>
              <div class="loading-state">
                <span class="loading-spinner"></span>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</p>
              </div>
            </div>
          </div>
        `).join('')}
      </div>
    `;
  }

  /**
   * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
   */
  bindEvents() {
    const tabs = this.container.querySelectorAll('.nav-tab');
    
    tabs.forEach(tab => {
      tab.addEventListener('click', (e) => {
        const sectionId = e.currentTarget.dataset.section;
        this.switchToSection(sectionId);
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ swipe –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    this.setupSwipeNavigation();
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏
   */
  switchToSection(sectionId) {
    if (!this.sections[sectionId]) {
      console.warn('‚ö†Ô∏è Unknown section:', sectionId);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    this.container.querySelectorAll('.nav-tab').forEach(tab => {
      tab.classList.toggle('active', tab.dataset.section === sectionId);
    });

    this.container.querySelectorAll('.nav-section').forEach(section => {
      section.classList.toggle('active', section.dataset.section === sectionId);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ–∫—Ü–∏—é
    this.currentSection = sectionId;

    // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    this.onSectionChange(sectionId);

    // Haptic feedback –¥–ª—è Telegram
    if (window.Telegram?.WebApp?.HapticFeedback) {
      window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
    }

    console.log('üìç Switched to section:', sectionId);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å–µ–∫—Ü–∏–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
   */
  onSectionChange(sectionId) {
    // –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const event = new CustomEvent('navigation:sectionChange', {
      detail: { sectionId, user: this.currentUser }
    });
    document.dispatchEvent(event);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–µ–∫—Ü–∏–∏
   */
  updateSectionContent(sectionId, htmlContent) {
    const section = this.container.querySelector(`#${sectionId}-section`);
    if (section) {
      section.innerHTML = htmlContent;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤ —Å–µ–∫—Ü–∏–∏
   */
  setSectionLoading(sectionId, isLoading) {
    const section = this.container.querySelector(`#${sectionId}-section`);
    if (!section) return;

    if (isLoading) {
      section.innerHTML = `
        <div class="loading-state">
          <span class="loading-spinner"></span>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      `;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤ —Å–µ–∫—Ü–∏–∏
   */
  setSectionError(sectionId, errorMessage) {
    const section = this.container.querySelector(`#${sectionId}-section`);
    if (!section) return;

    section.innerHTML = `
      <div class="error-state">
        <div class="error-icon">‚ö†Ô∏è</div>
        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p>${errorMessage}</p>
        <button onclick="navigation.reloadSection('${sectionId}')" class="btn-primary">
          üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    `;
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ü–∏–∏
   */
  reloadSection(sectionId) {
    this.setSectionLoading(sectionId, true);
    this.onSectionChange(sectionId);
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ swipe –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
   */
  setupSwipeNavigation() {
    let startX = 0;
    let endX = 0;

    const content = this.container.querySelector('.nav-content');
    if (!content) return;

    content.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
    });

    content.addEventListener('touchend', (e) => {
      endX = e.changedTouches[0].clientX;
      this.handleSwipe();
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ swipe –∂–µ—Å—Ç–æ–≤
   */
  handleSwipe() {
    const threshold = 50; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è swipe
    const diff = startX - endX;

    if (Math.abs(diff) < threshold) return;

    const sectionsArray = Object.keys(this.sections);
    const currentIndex = sectionsArray.indexOf(this.currentSection);

    if (diff > 0 && currentIndex < sectionsArray.length - 1) {
      // Swipe –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∞—è —Å–µ–∫—Ü–∏—è
      this.switchToSection(sectionsArray[currentIndex + 1]);
    } else if (diff < 0 && currentIndex > 0) {
      // Swipe –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ–∫—Ü–∏—è
      this.switchToSection(sectionsArray[currentIndex - 1]);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ–∫—Ü–∏—é
   */
  getCurrentSection() {
    return this.currentSection;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∫—Ü–∏–∏
   */
  getSectionInfo(sectionId) {
    return this.sections[sectionId] || null;
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Å–µ–∫—Ü–∏—é (–¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
   */
  addCustomSection(sectionConfig) {
    this.sections[sectionConfig.id] = sectionConfig;
    this.render();
    this.bindEvents();
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.NavigationSystem = NavigationSystem;
window.navigation = null;

// Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
window.initNavigation = function(user, containerId) {
  window.navigation = new NavigationSystem();
  window.navigation.init(user, containerId);
  return window.navigation;
};

console.log('‚úÖ Navigation system loaded');
