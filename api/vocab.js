// üìÅ /api/vocab.js
import { createClient } from '@supabase/supabase-js';
import { authenticate } from './_auth-middleware.js';
import getRawBody from 'raw-body';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

export default async function handler(req, res) {
  try {
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (Telegram –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä)
    const user = await authenticate(req, res, ['admin', 'tutor', 'student']);
    if (!user) return; // –û—à–∏–±–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ authenticate()

    console.log('‚úÖ Vocab API - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.name, '- —Ä–æ–ª—å:', user.role, '- –º–µ—Ç–æ–¥:', user.auth_method);

    if (req.method === 'GET') {
      return await handleGetRequest(req, res, user);
    }

    if (req.method === 'POST') {
      return await handlePostRequest(req, res, user);
    }

    if (req.method === 'PUT') {
      return await handlePutRequest(req, res, user);
    }

    return res.status(405).json({ error: 'Method not allowed' });

  } catch (error) {
    console.error('Unexpected error in vocab API:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}

async function handleGetRequest(req, res, requestingUser) {
  const { searchParams } = new URL(req.url, `http://${req.headers.host}`);
  const session_id = searchParams.get('session_id');
  const user_name = searchParams.get('user_name');
  const user_id = searchParams.get('user_id');

  let query = supabase
    .from('hanna_vocab')
    .select(`
      id,
      word,
      translation,
      example,
      created_at,
      language,
      studied_count,
      last_studied_at,
      session_id,
      user_id,
      hanna_users!inner(name, telegram_id)
    `)
    .order('created_at', { ascending: false });

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª—è–º
  if (requestingUser.role === 'student') {
    // –°—Ç—É–¥–µ–Ω—Ç—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å
    if (requestingUser.auth_method === 'telegram') {
      query = query.eq('user_id', requestingUser.id);
    } else {
      // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ –∏–º–µ–Ω–∏
      if (user_name) {
        query = query.eq('hanna_users.name', user_name);
      } else {
        return res.status(400).json({ 
          error: 'Missing user identification',
          message: '–î–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä user_name'
        });
      }
    }
  } else if (requestingUser.role === 'tutor') {
    // –¢—å—é—Ç–æ—Ä—ã –≤–∏–¥—è—Ç —Å–ª–æ–≤–∞—Ä–∏ —Å–≤–æ–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å tutor_id
    // query = query.eq('hanna_users.tutor_id', requestingUser.id);
  }
  // –ê–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –≤—Å–µ

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
  if (session_id) {
    query = query.eq('session_id', session_id);
  }
  
  if (user_name && requestingUser.role !== 'student') {
    query = query.eq('hanna_users.name', user_name);
  }
  
  if (user_id) {
    query = query.eq('user_id', user_id);
  }

  const { data, error } = await query;

  if (error) {
    console.error('Database error:', error);
    return res.status(500).json({ error: error.message });
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const words = data.map(w => ({
    id: w.id,
    word: w.word,
    translation: w.translation,
    example: w.example,
    created_at: w.created_at,
    language: w.language,
    studied_count: w.studied_count || 0,
    last_studied_at: w.last_studied_at,
    session_id: w.session_id,
    user_id: w.user_id,
    user_name: w.hanna_users?.name,
    session_date: w.created_at // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  }));

  return res.status(200).json({ 
    words,
    requester: {
      name: requestingUser.name,
      role: requestingUser.role,
      auth_method: requestingUser.auth_method
    }
  });
}

async function handlePostRequest(req, res, requestingUser) {
  const rawBody = await getRawBody(req);
  const body = JSON.parse(rawBody.toString());
  
  const { word, translation, example, session_id, user_id, language } = body;
  
  if (!word || (!session_id && !user_id)) {
    return res.status(400).json({ error: 'Missing required fields: word and (session_id or user_id)' });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤
  if (requestingUser.role === 'student') {
    // –°—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞ —Ç–æ–ª—å–∫–æ —Å–µ–±–µ
    if (requestingUser.auth_method === 'telegram') {
      if (user_id && user_id !== requestingUser.id) {
        return res.status(403).json({ error: 'Students can only add words to their own vocabulary' });
      }
    } else {
      // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
      return res.status(403).json({ 
        error: 'Browser students cannot add words',
        message: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç'
      });
    }
  }

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω session_id, –Ω–æ –Ω–µ—Ç user_id, –ø–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–µ—Å—Å–∏–∏
  let finalUserId = user_id;
  if (!finalUserId && session_id) {
    const { data: sessionData } = await supabase
      .from('hanna_sessions')
      .select('participant_ids')
      .eq('id', session_id)
      .single();
    
    if (sessionData?.participant_ids?.length > 0) {
      finalUserId = sessionData.participant_ids[0];
    }
  }

  // –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –∏ –Ω–µ —É–∫–∞–∑–∞–Ω user_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π ID
  if (!finalUserId && requestingUser.role === 'student' && requestingUser.auth_method === 'telegram') {
    finalUserId = requestingUser.id;
  }

  if (!finalUserId) {
    return res.status(400).json({ error: 'Cannot determine user_id' });
  }

  const { error } = await supabase.from('hanna_vocab').insert({
    word,
    translation,
    example,
    session_id,
    user_id: finalUserId,
    language
  });

  if (error) {
    console.error('Insert error:', error);
    return res.status(500).json({ error: error.message });
  }

  return res.status(200).json({ 
    success: true,
    added_by: {
      name: requestingUser.name,
      role: requestingUser.role
    }
  });
}

async function handlePutRequest(req, res, requestingUser) {
  const rawBody = await getRawBody(req);
  const body = JSON.parse(rawBody.toString());
  
  const { id, studied } = body;
  
  if (!id) {
    return res.status(400).json({ error: 'Missing word id' });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  if (requestingUser.role === 'student') {
    // –°—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–ª–æ–≤–∞
    if (requestingUser.auth_method === 'telegram') {
      const { data: wordData } = await supabase
        .from('hanna_vocab')
        .select('user_id')
        .eq('id', id)
        .single();
      
      if (!wordData || wordData.user_id !== requestingUser.id) {
        return res.status(403).json({ error: 'Students can only update their own words' });
      }
    } else {
      // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
      return res.status(403).json({ 
        error: 'Browser students cannot update words',
        message: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç'
      });
    }
  }

  const updateData = {};
  if (studied) {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑—É—á–µ–Ω–∏—è
    const { data: currentWord } = await supabase
      .from('hanna_vocab')
      .select('studied_count')
      .eq('id', id)
      .single();
    
    updateData.studied_count = (currentWord?.studied_count || 0) + 1;
    updateData.last_studied_at = new Date().toISOString();
  }

  const { error } = await supabase
    .from('hanna_vocab')
    .update(updateData)
    .eq('id', id);

  if (error) {
    console.error('Update error:', error);
    return res.status(500).json({ error: error.message });
  }

  return res.status(200).json({ 
    success: true,
    updated_by: {
      name: requestingUser.name,
      role: requestingUser.role
    }
  });
}
