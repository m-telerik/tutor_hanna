<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–°–ª–æ–≤–∞—Ä—å —Å—Ç—É–¥–µ–Ω—Ç–∞</title>
  <script src="https://telegram.org/js/telegram-web-app.js"></script>
  <style>
    :root {
      --bg-color: #fff;
      --text-color: #202124;
      --border-color: #e0e0e0;
      --header-bg: #f1f3f4;
      --accent-color: #007aff;
      --card-bg: #f8f9fa;
      --success-color: #28a745;
      --input-bg: #fff;
      --input-border: #d1d5db;
    }

    @media (prefers-color-scheme: dark) {
      :root {
        --bg-color: #1a1a1a;
        --text-color: #e1e1e1;
        --border-color: #333;
        --header-bg: #2d2d2d;
        --accent-color: #0a84ff;
        --card-bg: #2d2d2d;
        --success-color: #34d058;
        --input-bg: #2d2d2d;
        --input-border: #404040;
      }
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", sans-serif;
      font-size: 14px;
      margin: 0.5rem;
      padding: 0;
      background: var(--bg-color);
      color: var(--text-color);
      transition: background-color 0.3s, color 0.3s;
    }

    h1, h2, h3 {
      font-size: 1.2rem;
      margin: 0.5rem 0;
    }

    .header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 1rem;
    }

    .filters {
      background: var(--card-bg);
      border-radius: 8px;
      padding: 1rem;
      margin: 1rem 0;
      border: 1px solid var(--border-color);
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
      align-items: center;
    }

    .filter-btn {
      background: var(--bg-color);
      border: 1px solid var(--border-color);
      border-radius: 20px;
      padding: 6px 12px;
      font-size: 12px;
      cursor: pointer;
      transition: all 0.2s;
    }

    .filter-btn.active {
      background: var(--accent-color);
      color: white;
      border-color: var(--accent-color);
    }

    .search-box {
      flex: 1;
      min-width: 200px;
      padding: 8px 12px;
      border: 1px solid var(--input-border);
      border-radius: 6px;
      font-size: 14px;
      background: var(--input-bg);
      color: var(--text-color);
    }

    .stats {
      background: var(--card-bg);
      border-radius: 8px;
      padding: 1rem;
      margin: 1rem 0;
      border: 1px solid var(--border-color);
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
      gap: 1rem;
      text-align: center;
    }

    .stat-item {
      padding: 0.5rem;
    }

    .stat-number {
      font-size: 1.5em;
      font-weight: bold;
      color: var(--accent-color);
    }

    .stat-label {
      font-size: 0.9em;
      opacity: 0.8;
      margin-top: 0.5rem;
    }

    .vocab-list {
      margin: 2rem 0;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1rem;
      background: var(--bg-color);
    }

    th, td {
      padding: 8px;
      border-bottom: 1px solid var(--border-color);
      text-align: left;
      font-size: 13px;
    }

    th {
      background-color: var(--header-bg);
      font-weight: 500;
      position: sticky;
      top: 0;
      z-index: 10;
    }

    tr:hover {
      background-color: var(--card-bg);
    }

    .word-row.studied {
      opacity: 0.7;
    }

    .word-actions {
      display: flex;
      gap: 8px;
      align-items: center;
    }

    .action-btn {
      background: none;
      border: 1px solid var(--border-color);
      border-radius: 4px;
      padding: 4px 8px;
      font-size: 11px;
      cursor: pointer;
      transition: all 0.2s;
    }

    .action-btn:hover {
      background: var(--accent-color);
      color: white;
      border-color: var(--accent-color);
    }

    .action-btn.studied {
      background: var(--success-color);
      color: white;
      border-color: var(--success-color);
    }

    a {
      color: var(--accent-color);
      text-decoration: none;
    }

    a:hover {
      text-decoration: underline;
    }

    button {
      background: none;
      border: none;
      color: var(--accent-color);
      font-size: 13px;
      padding: 0.5rem 0;
      cursor: pointer;
    }

    button:hover {
      text-decoration: underline;
    }

    .emoji {
      font-size: 1.2em;
      margin-right: 0.5rem;
    }

    .loading, .error {
      text-align: center;
      padding: 2rem;
      color: var(--text-color);
    }

    .error {
      color: #ff3b30;
    }

    .empty-state {
      text-align: center;
      padding: 3rem 1rem;
      color: var(--text-color);
      opacity: 0.6;
    }

    .language-badge {
      background: var(--accent-color);
      color: white;
      padding: 2px 6px;
      border-radius: 10px;
      font-size: 10px;
      font-weight: 500;
    }

    .language-badge.english {
      background: #007aff;
    }

    .language-badge.french {
      background: #5856d6;
    }
  </style>
</head>
<body>
  <div class="header">
    <button onclick="history.back()">‚Üê –ù–∞–∑–∞–¥</button>
    <h1><span class="emoji">üìö</span>–°–ª–æ–≤–∞—Ä—å</h1>
    <div></div>
  </div>

  <div class="stats" id="stats">
    <div class="stat-item">
      <div class="stat-number" id="total-words">0</div>
      <div class="stat-label">–í—Å–µ–≥–æ —Å–ª–æ–≤</div>
    </div>
    <div class="stat-item">
      <div class="stat-number" id="english-words">0</div>
      <div class="stat-label">English</div>
    </div>
    <div class="stat-item">
      <div class="stat-number" id="french-words">0</div>
      <div class="stat-label">French</div>
    </div>
    <div class="stat-item">
      <div class="stat-number" id="studied-words">0</div>
      <div class="stat-label">–ò–∑—É—á–µ–Ω–æ</div>
    </div>
  </div>

  <div class="filters">
    <input type="text" class="search-box" id="search" placeholder="–ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º..." />
    <button class="filter-btn active" data-filter="all">–í—Å–µ</button>
    <button class="filter-btn" data-filter="english">English</button>
    <button class="filter-btn" data-filter="french">French</button>
    <button class="filter-btn" data-filter="studied">–ò–∑—É—á–µ–Ω–æ</button>
    <button class="filter-btn" data-filter="new">–ù–æ–≤—ã–µ</button>
  </div>

  <div class="vocab-list">
    <table id="vocab-table">
      <thead>
        <tr>
          <th>–î–∞—Ç–∞ —É—Ä–æ–∫–∞</th>
          <th>–°–ª–æ–≤–æ</th>
          <th>–ü–µ—Ä–µ–≤–æ–¥</th>
          <th>–ü—Ä–∏–º–µ—Ä</th>
          <th>–Ø–∑—ã–∫</th>
          <th>–ò–∑—É—á–µ–Ω–æ</th>
          <th>–î–µ–π—Å—Ç–≤–∏—è</th>
        </tr>
      </thead>
      <tbody id="vocab-tbody">
        <tr>
          <td colspan="7" class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</td>
        </tr>
      </tbody>
    </table>
  </div>

  <script>
    const studentName = new URLSearchParams(window.location.search).get("student_name");
    const userId = Telegram.WebApp.initDataUnsafe?.user?.id;
    const vocabTbody = document.getElementById("vocab-tbody");
    const searchInput = document.getElementById("search");
    
    let allWords = [];
    let filteredWords = [];
    let currentFilter = 'all';

    if (!studentName || !userId) {
      vocabTbody.innerHTML = '<tr><td colspan="7" class="error">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</td></tr>';
    } else {
      document.querySelector('h1').innerHTML = `<span class="emoji">üìö</span>–°–ª–æ–≤–∞—Ä—å: ${studentName}`;
      loadVocabulary();
    }

    async function loadVocabulary() {
      try {
        const res = await fetch(`/api/vocab?user_name=${encodeURIComponent(studentName)}`, {
          headers: { "x-telegram-id": userId }
        });
        const { words = [] } = await res.json();
        
        allWords = words;
        updateStats();
        applyFilters();
      } catch (error) {
        console.error('Error loading vocabulary:', error);
        vocabTbody.innerHTML = '<tr><td colspan="7" class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è</td></tr>';
      }
    }

    function updateStats() {
      const englishWords = allWords.filter(w => w.language === 'english');
      const frenchWords = allWords.filter(w => w.language === 'french');
      const studiedWords = allWords.filter(w => w.studied_count > 0);

      document.getElementById('total-words').textContent = allWords.length;
      document.getElementById('english-words').textContent = englishWords.length;
      document.getElementById('french-words').textContent = frenchWords.length;
      document.getElementById('studied-words').textContent = studiedWords.length;
    }

    function applyFilters() {
      let filtered = [...allWords];
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É –∏ —Å—Ç–∞—Ç—É—Å—É
      if (currentFilter === 'english') {
        filtered = filtered.filter(w => w.language === 'english');
      } else if (currentFilter === 'french') {
        filtered = filtered.filter(w => w.language === 'french');
      } else if (currentFilter === 'studied') {
        filtered = filtered.filter(w => w.studied_count > 0);
      } else if (currentFilter === 'new') {
        filtered = filtered.filter(w => w.studied_count === 0);
      }

      // –ü–æ–∏—Å–∫
      const searchTerm = searchInput.value.toLowerCase().trim();
      if (searchTerm) {
        filtered = filtered.filter(w => 
          w.word.toLowerCase().includes(searchTerm) ||
          (w.translation && w.translation.toLowerCase().includes(searchTerm)) ||
          (w.example && w.example.toLowerCase().includes(searchTerm))
        );
      }

      filteredWords = filtered;
      renderTable();
    }

    function renderTable() {
      if (filteredWords.length === 0) {
        vocabTbody.innerHTML = `
          <tr>
            <td colspan="7" class="empty-state">
              <div class="emoji">üîç</div>
              <p>–°–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            </td>
          </tr>
        `;
        return;
      }

      vocabTbody.innerHTML = filteredWords.map(w => `
        <tr class="word-row ${w.studied_count > 0 ? 'studied' : ''}">
          <td>${w.session_date ? new Date(w.session_date).toLocaleDateString('ru-RU') : '‚Äî'}</td>
          <td><strong>${w.word}</strong></td>
          <td>${w.translation || ''}</td>
          <td>${w.example || ''}</td>
          <td>
            ${w.language ? `<span class="language-badge ${w.language}">${w.language}</span>` : '‚Äî'}
          </td>
          <td>
            ${w.studied_count > 0 ? `<span style="color: var(--success-color);">${w.studied_count}x</span>` : '‚Äî'}
          </td>
          <td>
            <div class="word-actions">
              <button class="action-btn ${w.studied_count > 0 ? 'studied' : ''}" 
                      onclick="markStudied('${w.id}')">
                ${w.studied_count > 0 ? '‚úì' : '–ò–∑—É—á–∏—Ç—å'}
              </button>
            </div>
          </td>
        </tr>
      `).join('');
    }

    async function markStudied(wordId) {
      try {
        const res = await fetch('/api/vocab', {
          method: 'PUT',
          headers: {
            "Content-Type": "application/json",
            "x-telegram-id": userId
          },
          body: JSON.stringify({ id: wordId, studied: true })
        });

        if (res.ok) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          const word = allWords.find(w => w.id === wordId);
          if (word) {
            word.studied_count = (word.studied_count || 0) + 1;
            word.last_studied_at = new Date().toISOString();
          }
          
          updateStats();
          applyFilters();
        } else {
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤–∞');
