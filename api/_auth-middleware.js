// üìÅ /api/_auth-middleware.js
// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Telegram –∏ –±—Ä–∞—É–∑–µ—Ä–∞

import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ Telegram WebApp, —Ç–∞–∫ –∏ –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
 */
export async function checkAuth(req, allowedRoles = []) {
  const telegramId = req.headers["x-telegram-id"];
  const adminToken = req.headers["x-admin-token"];
  const adminId = req.headers["x-admin-id"];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (adminToken && adminId) {
    return await checkBrowserAuth(adminToken, adminId, allowedRoles);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (telegramId) {
    return await checkTelegramAuth(parseInt(telegramId), allowedRoles);
  }

  throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function checkBrowserAuth(token, adminId, allowedRoles) {
  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–≤ production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é)
  if (!token.startsWith(`admin_${adminId}_`)) {
    throw new Error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  }

  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  try {
    const { data: session } = await supabase
      .from('admin_browser_sessions')
      .select('*')
      .eq('admin_id', parseInt(adminId))
      .eq('token', token)
      .gte('expires_at', new Date().toISOString())
      .single();

    if (session) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
      const userData = {
        admin_id: session.admin_id,
        name: session.name,
        role: session.role,
        auth_method: 'browser'
      };

      if (allowedRoles.length > 0 && !allowedRoles.includes(userData.role)) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: ${allowedRoles.join(' –∏–ª–∏ ')}, —É –≤–∞—Å: ${userData.role}`);
      }

      return userData;
    }
  } catch (dbError) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É:', dbError.message);
  }

  // Fallback: –ª–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const adminData = {
    1: { name: '–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω', role: 'admin' },
    2: { name: '–ê–Ω–Ω–∞', role: 'admin' },
    3: { name: '–¢—å—é—Ç–æ—Ä', role: 'tutor' }
  };

  const userData = adminData[parseInt(adminId)];
  if (!userData) {
    throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
  }

  if (allowedRoles.length > 0 && !allowedRoles.includes(userData.role)) {
    throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: ${allowedRoles.join(' –∏–ª–∏ ')}, —É –≤–∞—Å: ${userData.role}`);
  }

  return {
    admin_id: parseInt(adminId),
    name: userData.name,
    role: userData.role,
    auth_method: 'browser'
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function checkTelegramAuth(telegramId, allowedRoles) {
  const { data: user, error } = await supabase
    .from('hanna_users')
    .select('id, name, role, is_active, telegram_id, username, email')
    .eq('telegram_id', telegramId)
    .single();

  if (error && error.code !== 'PGRST116') {
    throw new Error(`–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
  }

  if (!user) {
    throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
  }

  if (allowedRoles.length > 0 && !allowedRoles.includes(user.role)) {
    throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: ${allowedRoles.join(' –∏–ª–∏ ')}, —É –≤–∞—Å: ${user.role}`);
  }

  return {
    id: user.id,
    telegram_id: user.telegram_id,
    name: user.name,
    username: user.username,
    email: user.email,
    role: user.role,
    is_active: user.is_active,
    auth_method: 'telegram'
  };
}

/**
 * Middleware —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Express-like API
 */
export function requireAuth(allowedRoles = []) {
  return async (req, res, next) => {
    try {
      const user = await checkAuth(req, allowedRoles);
      req.user = user;
      req.isAuthenticated = true;
      
      if (next) next();
      return user;
    } catch (error) {
      console.error('Auth middleware error:', error);
      
      return res.status(403).json({
        error: 'Access denied',
        message: error.message,
        required_roles: allowedRoles
      });
    }
  };
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API handlers
 */
export async function authenticate(req, res, allowedRoles = []) {
  try {
    const user = await checkAuth(req, allowedRoles);
    return user;
  } catch (error) {
    res.status(403).json({
      error: 'Access denied',
      message: error.message,
      required_roles: allowedRoles
    });
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
export async function getCurrentUser(req) {
  try {
    return await checkAuth(req, []);
  } catch (error) {
    return null;
  }
}
