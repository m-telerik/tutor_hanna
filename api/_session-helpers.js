// üìÅ /api/_session-helpers.js
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å hanna_sessions

/**
 * –°—Ç–∞—Ç—É—Å—ã —Å–µ—Å—Å–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
export const SESSION_STATUS = {
  PLANNED: 'planned',
  CONFIRMED: 'confirmed', 
  CANCELLED: 'cancelled',
  COMPLETED: 'completed'
};

/**
 * –¢–∏–ø—ã —Å–µ—Å—Å–∏–π
 */
export const SESSION_TYPE = {
  INDIVIDUAL: 'individual',
  PAIR: 'pair',
  GROUP: 'group'
};

/**
 * –Ø–∑—ã–∫–∏
 */
export const LANGUAGE = {
  ENGLISH: 'english',
  FRENCH: 'french'
};

/**
 * –¢–∏–ø—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
 */
export const SESSION_CREATION_TYPE = {
  MANUAL: 'manual',
  AUTO_RECURRING: 'auto_recurring',
  MAKEUP: 'makeup',
  RESCHEDULED: 'rescheduled'
};

/**
 * –ö—Ç–æ —Å–æ–∑–¥–∞–ª —Å–µ—Å—Å–∏—é
 */
export const CREATED_BY = {
  AGENT: 'agent',
  STUDENT: 'student', 
  TEACHER: 'teacher',
  SYSTEM: 'system',
  CALENDAR: 'calendar'
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
 */
export function getStatusLabel(status) {
  const labels = {
    [SESSION_STATUS.PLANNED]: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
    [SESSION_STATUS.CONFIRMED]: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
    [SESSION_STATUS.CANCELLED]: '–û—Ç–º–µ–Ω–µ–Ω–æ',
    [SESSION_STATUS.COMPLETED]: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
  };
  return labels[status] || status;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
 */
export function getTypeLabel(type) {
  const labels = {
    [SESSION_TYPE.INDIVIDUAL]: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ',
    [SESSION_TYPE.PAIR]: '–ü–∞—Ä–Ω–æ–µ',
    [SESSION_TYPE.GROUP]: '–ì—Ä—É–ø–ø–æ–≤–æ–µ'
  };
  return labels[type] || type;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
 */
export function getLanguageLabel(language) {
  const labels = {
    [LANGUAGE.ENGLISH]: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
    [LANGUAGE.FRENCH]: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π'
  };
  return labels[language] || language;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å CSS –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
 */
export function getStatusClass(status) {
  const classes = {
    [SESSION_STATUS.PLANNED]: 'status-planned',
    [SESSION_STATUS.CONFIRMED]: 'status-confirmed',
    [SESSION_STATUS.CANCELLED]: 'status-cancelled',
    [SESSION_STATUS.COMPLETED]: 'status-completed'
  };
  return classes[status] || 'status-unknown';
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
 */
export function getStatusEmoji(status) {
  const emojis = {
    [SESSION_STATUS.PLANNED]: 'üìÖ',
    [SESSION_STATUS.CONFIRMED]: '‚úÖ',
    [SESSION_STATUS.CANCELLED]: '‚ùå',
    [SESSION_STATUS.COMPLETED]: '‚úÖ'
  };
  return emojis[status] || '‚ùì';
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏
 */
export function canJoinSession(session) {
  const sessionDate = new Date(session.session_datetime);
  const now = new Date();
  const isUpcoming = sessionDate > now;
  const hasZoomLink = !!session.zoom_link;
  const statusAllowsJoin = [SESSION_STATUS.PLANNED, SESSION_STATUS.CONFIRMED].includes(session.status);
  
  // –ú–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞
  const tenMinutesBefore = new Date(sessionDate.getTime() - 10 * 60 * 1000);
  const canJoinByTime = now >= tenMinutesBefore;
  
  return isUpcoming && hasZoomLink && statusAllowsJoin && canJoinByTime;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ –∑–∞–Ω—è—Ç–∏—è –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */
export function getTimeUntil(sessionDate) {
  const now = new Date();
  const diff = sessionDate - now;
  
  if (diff <= 0) return '–°–µ–π—á–∞—Å';
  
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  
  if (days > 0) {
    return `—á–µ—Ä–µ–∑ ${days} –¥–Ω.`;
  } else if (hours > 0) {
    return `—á–µ—Ä–µ–∑ ${hours} —á.`;
  } else if (minutes > 0) {
    return `—á–µ—Ä–µ–∑ ${minutes} –º–∏–Ω.`;
  } else {
    return '—Å–∫–æ—Ä–æ';
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (—Å–µ–≥–æ–¥–Ω—è, –≤—á–µ—Ä–∞, –∑–∞–≤—Ç—Ä–∞ –∏ —Ç.–¥.)
 */
export function getRelativeTime(sessionDate) {
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  const sessionDay = new Date(sessionDate.getFullYear(), sessionDate.getMonth(), sessionDate.getDate());
  
  const diffDays = Math.floor((sessionDay - today) / (1000 * 60 * 60 * 24));
  
  if (diffDays === 0) return '–°–µ–≥–æ–¥–Ω—è';
  if (diffDays === 1) return '–ó–∞–≤—Ç—Ä–∞';
  if (diffDays === -1) return '–í—á–µ—Ä–∞';
  if (diffDays > 1 && diffDays <= 7) return `–ß–µ—Ä–µ–∑ ${diffDays} –¥–Ω—è`;
  if (diffDays < -1 && diffDays >= -7) return `${Math.abs(diffDays)} –¥–Ω—è –Ω–∞–∑–∞–¥`;
  
  return sessionDate.toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'short'
  });
}

/**
 * –û–±–æ–≥–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
export function enrichSessionData(session, studentInfo = null) {
  const sessionDate = new Date(session.session_datetime);
  const isUpcoming = sessionDate > new Date();
  const isPast = sessionDate < new Date();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
  const language = session.language || 
                  (Array.isArray(studentInfo?.languages) 
                    ? studentInfo.languages.join(', ') 
                    : studentInfo?.languages) || '–ù–µ —É–∫–∞–∑–∞–Ω';

  return {
    ...session,
    formatted_date: sessionDate.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    }),
    formatted_time: sessionDate.toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit'
    }),
    formatted_datetime: sessionDate.toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }),
    weekday: sessionDate.toLocaleDateString('ru-RU', { weekday: 'long' }),
    weekday_short: sessionDate.toLocaleDateString('ru-RU', { weekday: 'short' }),
    display_language: getLanguageLabel(language),
    display_status: getStatusLabel(session.status),
    display_type: getTypeLabel(session.type),
    status_emoji: getStatusEmoji(session.status),
    status_class: getStatusClass(session.status),
    is_upcoming: isUpcoming,
    is_past: isPast,
    can_join: canJoinSession(session),
    time_until: isUpcoming ? getTimeUntil(sessionDate) : null,
    relative_time: getRelativeTime(sessionDate),
    student_name: studentInfo?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç',
    student_username: studentInfo?.username
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å UUID –∏ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
 */
export function validateUUID(uuid, fieldName = 'ID') {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  
  if (!uuid) {
    throw new Error(`${fieldName} –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω`);
  }
  
  if (!uuidRegex.test(uuid)) {
    throw new Error(`${fieldName} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º UUID`);
  }
  
  return true;
}
