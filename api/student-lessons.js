// üìÅ /api/student-lessons.js
import { createClient } from '@supabase/supabase-js';
import { authenticate } from './_auth-middleware.js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

export default async function handler(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (Telegram –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä)
    const user = await authenticate(req, res, ['admin', 'tutor', 'student']);
    if (!user) return; // –û—à–∏–±–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ authenticate()

    console.log('‚úÖ Student Lessons API - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.name, '- —Ä–æ–ª—å:', user.role, '- –º–µ—Ç–æ–¥:', user.auth_method);

    const { searchParams } = new URL(req.url, `http://${req.headers.host}`);
    const user_id = searchParams.get('user_id');
    const status_filter = searchParams.get('status') || 'all'; // all, upcoming, completed, cancelled
    const limit = parseInt(searchParams.get('limit')) || 50;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—å–∏ –∑–∞–Ω—è—Ç–∏—è –∑–∞–≥—Ä—É–∂–∞—Ç—å
    let targetUserId = user_id;
    
    if (user.role === 'student') {
      // –°—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–Ω—è—Ç–∏—è
      if (user.auth_method === 'telegram') {
        targetUserId = user.id;
      } else {
        return res.status(403).json({ 
          error: 'Access denied',
          message: '–°—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–Ω—è—Ç–∏—è'
        });
      }
    } else if (user.role === 'tutor') {
      // –¢—å—é—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –∑–∞–Ω—è—Ç–∏—è —Å–≤–æ–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ tutor-student
      if (!targetUserId) {
        return res.status(400).json({ 
          error: 'Missing user_id',
          message: '–£–∫–∞–∂–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π'
        });
      }
    } else if (user.role === 'admin') {
      // –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è
      if (!targetUserId) {
        return res.status(400).json({ 
          error: 'Missing user_id',
          message: '–£–∫–∞–∂–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π'
        });
      }
    }

    // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let query = supabase
      .from('hanna_sessions')
      .select(`
        id,
        session_datetime,
        duration_minutes,
        status,
        type,
        language,
        zoom_link,
        zoom_meeting_id,
        notes,
        participant_ids,
        google_event_id,
        session_type,
        created_at,
        updated_at,
        created_by,
        tutor_id
      `)
      .contains('participant_ids', [targetUserId])
      .order('session_datetime', { ascending: false })
      .limit(limit);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const now = new Date().toISOString();
    
    if (status_filter === 'upcoming') {
      query = query
        .gte('session_datetime', now)
        .in('status', ['planned', 'confirmed']);
    } else if (status_filter === 'completed') {
      query = query
        .eq('status', 'completed');
    } else if (status_filter === 'cancelled') {
      query = query
        .eq('status', 'cancelled');
    } else if (status_filter === 'past') {
      query = query
        .lt('session_datetime', now);
    }

    const { data: sessions, error: sessionsError } = await query;

    if (sessionsError) {
      console.error('Database error:', sessionsError);
      return res.status(500).json({ error: sessionsError.message });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const { data: studentInfo } = await supabase
      .from('hanna_users')
      .select('id, name, username, email, languages')
      .eq('id', targetUserId)
      .single();

    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏–π
    const enrichedLessons = sessions.map(session => {
      const sessionDate = new Date(session.session_datetime);
      const isUpcoming = sessionDate > new Date();
      const isPast = sessionDate < new Date();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
      const language = session.language || 
                      (Array.isArray(studentInfo?.languages) 
                        ? studentInfo.languages.join(', ') 
                        : studentInfo?.languages) || '–ù–µ —É–∫–∞–∑–∞–Ω';

      return {
        id: session.id,
        date: session.session_datetime,
        formatted_date: sessionDate.toLocaleDateString('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        }),
        formatted_time: sessionDate.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit'
        }),
        formatted_datetime: sessionDate.toLocaleString('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        }),
        weekday: sessionDate.toLocaleDateString('ru-RU', { weekday: 'long' }),
        duration: session.duration_minutes || 60,
        status: session.status || 'planned',
        type: session.type || 'individual',
        language: language,
        zoom_link: session.zoom_link,
        zoom_meeting_id: session.zoom_meeting_id,
        google_event_id: session.google_event_id,
        session_type: session.session_type,
        notes: session.notes,
        created_by: session.created_by,
        tutor_id: session.tutor_id,
        is_upcoming: isUpcoming,
        is_past: isPast,
        can_join: isUpcoming && session.zoom_link && 
                  ['planned', 'confirmed'].includes(session.status),
        student_name: studentInfo?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç',
        student_username: studentInfo?.username,
        time_until: isUpcoming ? getTimeUntil(sessionDate) : null,
        relative_time: getRelativeTime(sessionDate)
      };
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const upcomingLessons = enrichedLessons.filter(l => l.is_upcoming && l.status !== 'cancelled');
    const pastLessons = enrichedLessons.filter(l => l.is_past);
    const cancelledLessons = enrichedLessons.filter(l => l.status === 'cancelled');

    const response = {
      lessons: enrichedLessons,
      grouped: {
        upcoming: upcomingLessons,
        past: pastLessons,
        cancelled: cancelledLessons
      },
      stats: {
        total: enrichedLessons.length,
        upcoming: upcomingLessons.length,
        past: pastLessons.length,
        cancelled: cancelledLessons.length,
        completed: enrichedLessons.filter(l => l.status === 'completed').length
      },
      student_info: studentInfo,
      requester: {
        name: user.name,
        role: user.role,
        auth_method: user.auth_method
      },
      filters_applied: {
        user_id: targetUserId,
        status_filter,
        limit
      }
    };

    return res.status(200).json(response);

  } catch (error) {
    console.error('Unexpected error in student-lessons API:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–Ω—è—Ç–∏–π'
    });
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ –∑–∞–Ω—è—Ç–∏—è –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */
function getTimeUntil(sessionDate) {
  const now = new Date();
  const diff = sessionDate - now;
  
  if (diff <= 0) return null;
  
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  
  if (days > 0) {
    return `—á–µ—Ä–µ–∑ ${days} –¥–Ω.`;
  } else if (hours > 0) {
    return `—á–µ—Ä–µ–∑ ${hours} —á.`;
  } else if (minutes > 0) {
    return `—á–µ—Ä–µ–∑ ${minutes} –º–∏–Ω.`;
  } else {
    return '—Å–µ–π—á–∞—Å';
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (—Å–µ–≥–æ–¥–Ω—è, –≤—á–µ—Ä–∞, –∑–∞–≤—Ç—Ä–∞ –∏ —Ç.–¥.)
 */
function getRelativeTime(sessionDate) {
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  const sessionDay = new Date(sessionDate.getFullYear(), sessionDate.getMonth(), sessionDate.getDate());
  
  const diffDays = Math.floor((sessionDay - today) / (1000 * 60 * 60 * 24));
  
  if (diffDays === 0) return '–°–µ–≥–æ–¥–Ω—è';
  if (diffDays === 1) return '–ó–∞–≤—Ç—Ä–∞';
  if (diffDays === -1) return '–í—á–µ—Ä–∞';
  if (diffDays > 1 && diffDays <= 7) return `–ß–µ—Ä–µ–∑ ${diffDays} –¥–Ω—è`;
  if (diffDays < -1 && diffDays >= -7) return `${Math.abs(diffDays)} –¥–Ω—è –Ω–∞–∑–∞–¥`;
  
  return sessionDate.toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'short'
  });
}
