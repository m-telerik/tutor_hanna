// üìÅ /api/browser-auth.js
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø–∞—Ä–æ–ª–µ–π (–≤ production –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ ENV)
const ADMIN_CREDENTIALS = {
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤
  'admin123': {
    admin_id: 1,
    name: '–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω',
    role: 'admin',
    permissions: ['all']
  },
  'hanna2024': {
    admin_id: 2, 
    name: '–ê–Ω–Ω–∞',
    role: 'admin',
    permissions: ['students', 'lessons', 'vocabulary']
  },
  'tutor456': {
    admin_id: 3,
    name: '–¢—å—é—Ç–æ—Ä',
    role: 'tutor', 
    permissions: ['students', 'lessons']
  }
};

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { password, name } = req.body;
    
    if (!password) {
      return res.status(400).json({ 
        error: 'Missing password',
        message: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const adminData = ADMIN_CREDENTIALS[password];
    
    if (!adminData) {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      return res.status(401).json({ 
        error: 'Invalid credentials',
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º.'
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω (–≤ production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JWT)
    const token = generateSimpleToken(adminData.admin_id);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –±–∞–∑—É)
    console.log(`üîê Browser login: ${adminData.name} (${adminData.role}) at ${new Date().toISOString()}`);

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try {
      await supabase.from('admin_browser_sessions').insert({
        admin_id: adminData.admin_id,
        name: name || adminData.name,
        role: adminData.role,
        token: token,
        ip_address: req.headers['x-forwarded-for'] || req.connection?.remoteAddress,
        user_agent: req.headers['user-agent'],
        created_at: new Date().toISOString(),
        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() // 24 —á–∞—Å–∞
      });
    } catch (dbError) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–µ—Å—Å–∏—é –≤ –ë–î:', dbError.message);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = {
      admin_id: adminData.admin_id,
      name: name || adminData.name,
      role: adminData.role,
      permissions: adminData.permissions,
      token: token,
      expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
      auth_method: 'browser_password'
    };

    return res.status(200).json(userData);

  } catch (error) {
    console.error('Browser auth error:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    });
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
 */
function generateSimpleToken(adminId) {
  const timestamp = Date.now();
  const random = Math.random().toString(36).substring(2);
  return `admin_${adminId}_${timestamp}_${random}`;
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export function checkBrowserAuth(req, res, next) {
  const token = req.headers['x-admin-token'];
  const adminId = req.headers['x-admin-id'];
  
  if (!token || !adminId) {
    return res.status(401).json({ 
      error: 'Unauthorized',
      message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
    });
  }

  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–≤ production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é)
  if (token.startsWith(`admin_${adminId}_`)) {
    // –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω
    req.admin = { admin_id: parseInt(adminId), token };
    return next ? next() : true;
  }

  return res.status(401).json({ 
    error: 'Invalid token',
    message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
  });
}
