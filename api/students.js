// üìÅ api/students.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import { createClient } from '@supabase/supabase-js';
import { authenticate } from './_auth-middleware.js';
import { SESSION_STATUS, validateUUID } from './_session-helpers.js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

export default async function handler(req, res) {
  const url = new URL(req.url, `http://${req.headers.host}`);
  const tgid = url.searchParams.get("tgid");
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å tgid –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  if (tgid && !req.headers["x-telegram-id"]) {
    req.headers["x-telegram-id"] = tgid;
  }

  try {
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (Telegram –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä)
    const user = await authenticate(req, res, ['admin', 'tutor', 'student']);
    if (!user) return; // –û—à–∏–±–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ authenticate()

    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.name, '- —Ä–æ–ª—å:', user.role, '- –º–µ—Ç–æ–¥:', user.auth_method);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    let studentsQuery = supabase
      .from('hanna_users')
      .select('id, name, username, email, languages, preferred_days, preferred_time, booking_mode, telegram_id')
      .eq('is_active', true)
      .eq('role', 'student');

    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    if (user.role === 'student') {
      studentsQuery = studentsQuery.eq('id', user.id);
    } else if (user.role === 'tutor') {
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ tutor_id
      // studentsQuery = studentsQuery.eq('tutor_id', user.id);
    }
    // –ê–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

    const { data: users, error: studentsError } = await studentsQuery;

    if (studentsError) {
      console.error('Database error:', studentsError);
      return res.status(500).json({ 
        error: studentsError.message,
        details: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
      });
    }

    if (!users || users.length === 0) {
      return res.status(200).json({ 
        students: [],
        requester: {
          name: user.name,
          role: user.role,
          auth_method: user.auth_method
        },
        total: 0,
        message: user.role === 'student' ? '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' : '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –±—É–¥—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const userIds = users.map(u => u.id);
    const { data: allSessions, error: sessionsError } = await supabase
      .from('hanna_sessions')
      .select(`
        id, 
        participant_ids, 
        session_datetime, 
        status, 
        type, 
        language,
        duration_minutes,
        zoom_link,
        zoom_meeting_id,
        google_event_id,
        session_type,
        notes
      `)
      .gte('session_datetime', new Date().toISOString())
      .order('session_datetime', { ascending: true });

    if (sessionsError) {
      console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π:', sessionsError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–µ—Å—Å–∏–π
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –±–ª–∏–∂–∞–π—à–∏—Ö —Å–µ—Å—Å–∏–π –ø–æ user_id
    const nextSessionsMap = {};
    
    if (allSessions && allSessions.length > 0) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
      allSessions.forEach(session => {
        if (session.participant_ids && session.participant_ids.length > 0) {
          session.participant_ids.forEach(userId => {
            if (userIds.includes(userId)) {
              // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –±–ª–∏–∂–∞–π—à—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              if (!nextSessionsMap[userId] || 
                  nextSessionsMap[userId].session_datetime > session.session_datetime) {
                nextSessionsMap[userId] = session;
              }
            }
          });
        }
      });
    }

    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Å—Å–∏—è—Ö
    const students = users.map((u) => {
      const nextSession = nextSessionsMap[u.id];
      
      let sessionInfo = {
        next_session: null,
        next_session_id: null,
        next_session_datetime: null,
        status: null,
        type: null,
        can_join: false,
        zoom_link: null,
        time_until: null,
        duration: null
      };

      if (nextSession) {
        const sessionDate = new Date(nextSession.session_datetime);
        const now = new Date();
        const timeUntil = getTimeUntil(sessionDate);
        const canJoin = sessionDate > now && nextSession.zoom_link && 
                       [SESSION_STATUS.PLANNED, SESSION_STATUS.CONFIRMED].includes(nextSession.status);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        const sessionLanguage = nextSession.language || 
                               (Array.isArray(u.languages) ? u.languages.join(', ') : u.languages);

        sessionInfo = {
          next_session: sessionDate.toLocaleString('ru-RU', {
            timeZone: 'Asia/Bangkok',
            year: 'numeric',
            month: '2-digit', 
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
          }),
          next_session_id: nextSession.id,
          next_session_datetime: nextSession.session_datetime,
          status: nextSession.status,
          type: nextSession.type,
          session_language: sessionLanguage,
          session_type: nextSession.session_type,
          can_join: canJoin,
          zoom_link: nextSession.zoom_link,
          zoom_meeting_id: nextSession.zoom_meeting_id,
          google_event_id: nextSession.google_event_id,
          time_until: timeUntil,
          duration: nextSession.duration_minutes || 60,
          formatted_date: sessionDate.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            weekday: 'short'
          }),
          formatted_time: sessionDate.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
          }),
          notes: nextSession.notes
        };
      }

      return {
        id: u.id,
        user_id: u.id, // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        name: u.name,
        username: u.username,
        email: u.email,
        telegram_id: u.telegram_id,
        language: Array.isArray(u.languages) ? u.languages.join(', ') : (u.languages || '‚Äî'),
        languages: u.languages, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        preferred_days: u.preferred_days || [],
        preferred_time: u.preferred_time || null,
        booking_mode: u.booking_mode || 'by_teacher',
        frequency: u.preferred_days?.length || null,
        ...sessionInfo
      };
    });

    return res.status(200).json({ 
      students,
      requester: {
        name: user.name,
        role: user.role,
        auth_method: user.auth_method
      },
      total: students.length,
      stats: {
        with_upcoming_lessons: students.filter(s => s.next_session).length,
        without_lessons: students.filter(s => !s.next_session).length,
        can_join_now: students.filter(s => s.can_join).length
      }
    });

  } catch (error) {
    console.error('Unexpected error in students API:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞',
      details: error.message
    });
  }
}

// üìÅ api/student-lessons.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import { createClient } from '@supabase/supabase-js';
import { authenticate } from './_auth-middleware.js';
import { 
  SESSION_STATUS, 
  enrichSessionData, 
  validateUUID,
  getTimeUntil,
  getRelativeTime 
} from './_session-helpers.js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

export default async function handler(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (Telegram –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä)
    const user = await authenticate(req, res, ['admin', 'tutor', 'student']);
    if (!user) return; // –û—à–∏–±–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ authenticate()

    console.log('‚úÖ Student Lessons API - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.name, '- —Ä–æ–ª—å:', user.role, '- –º–µ—Ç–æ–¥:', user.auth_method);

    const { searchParams } = new URL(req.url, `http://${req.headers.host}`);
    const user_id = searchParams.get('user_id');
    const status_filter = searchParams.get('status') || 'all'; // all, upcoming, completed, cancelled
    const limit = parseInt(searchParams.get('limit')) || 50;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—å–∏ –∑–∞–Ω—è—Ç–∏—è –∑–∞–≥—Ä—É–∂–∞—Ç—å
    let targetUserId = user_id;
    
    if (user.role === 'student') {
      // –°—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–Ω—è—Ç–∏—è
      if (user.auth_method === 'telegram') {
        targetUserId = user.id;
      } else {
        return res.status(403).json({ 
          error: 'Access denied',
          message: '–°—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–Ω—è—Ç–∏—è'
        });
      }
    } else if (user.role === 'tutor') {
      // –¢—å—é—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –∑–∞–Ω—è—Ç–∏—è —Å–≤–æ–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
      if (!targetUserId) {
        return res.status(400).json({ 
          error: 'Missing user_id',
          message: '–£–∫–∞–∂–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π'
        });
      }
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º UUID
      try {
        validateUUID(targetUserId, 'user_id');
      } catch (error) {
        return res.status(400).json({ 
          error: 'Invalid user_id',
          message: error.message
        });
      }
    } else if (user.role === 'admin') {
      // –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è
      if (!targetUserId) {
        return res.status(400).json({ 
          error: 'Missing user_id',
          message: '–£–∫–∞–∂–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π'
        });
      }
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º UUID
      try {
        validateUUID(targetUserId, 'user_id');
      } catch (error) {
        return res.status(400).json({ 
          error: 'Invalid user_id',
          message: error.message
        });
      }
    }

    // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let query = supabase
      .from('hanna_sessions')
      .select(`
        id,
        session_datetime,
        duration_minutes,
        status,
        type,
        language,
        zoom_link,
        zoom_meeting_id,
        notes,
        participant_ids,
        google_event_id,
        session_type,
        created_at,
        updated_at,
        created_by,
        tutor_id
      `)
      .contains('participant_ids', [targetUserId])
      .order('session_datetime', { ascending: false })
      .limit(limit);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const now = new Date().toISOString();
    
    if (status_filter === 'upcoming') {
      query = query
        .gte('session_datetime', now)
        .in('status', [SESSION_STATUS.PLANNED, SESSION_STATUS.CONFIRMED]);
    } else if (status_filter === 'completed') {
      query = query
        .eq('status', SESSION_STATUS.COMPLETED);
    } else if (status_filter === 'cancelled') {
      query = query
        .eq('status', SESSION_STATUS.CANCELLED);
    } else if (status_filter === 'past') {
      query = query
        .lt('session_datetime', now);
    }

    const { data: sessions, error: sessionsError } = await query;

    if (sessionsError) {
      console.error('Database error:', sessionsError);
      return res.status(500).json({ 
        error: sessionsError.message,
        details: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–Ω—è—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const { data: studentInfo, error: studentError } = await supabase
      .from('hanna_users')
      .select('id, name, username, email, languages')
      .eq('id', targetUserId)
      .single();

    if (studentError && studentError.code !== 'PGRST116') {
      console.error('Student info error:', studentError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
    }

    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏–π
    const enrichedLessons = (sessions || []).map(session => {
      const sessionDate = new Date(session.session_datetime);
      const isUpcoming = sessionDate > new Date();
      const isPast = sessionDate < new Date();

      return {
        ...session,
        formatted_date: sessionDate.toLocaleDateString('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        }),
        formatted_time: sessionDate.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit'
        }),
        formatted_datetime: sessionDate.toLocaleString('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        }),
        weekday: sessionDate.toLocaleDateString('ru-RU', { weekday: 'long' }),
        weekday_short: sessionDate.toLocaleDateString('ru-RU', { weekday: 'short' }),
        display_language: session.language || (studentInfo?.languages ? 
          (Array.isArray(studentInfo.languages) ? studentInfo.languages.join(', ') : studentInfo.languages) 
          : '–ù–µ —É–∫–∞–∑–∞–Ω'),
        display_status: getStatusLabel(session.status),
        display_type: getTypeLabel(session.type),
        status_emoji: getStatusEmoji(session.status),
        status_class: getStatusClass(session.status),
        is_upcoming: isUpcoming,
        is_past: isPast,
        can_join: isUpcoming && session.zoom_link && 
                  ['planned', 'confirmed'].includes(session.status),
        student_name: studentInfo?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç',
        student_username: studentInfo?.username,
        time_until: isUpcoming ? getTimeUntil(sessionDate) : null,
        relative_time: getRelativeTime(sessionDate)
      };
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const upcomingLessons = enrichedLessons.filter(l => l.is_upcoming && l.status !== SESSION_STATUS.CANCELLED);
    const pastLessons = enrichedLessons.filter(l => l.is_past);
    const cancelledLessons = enrichedLessons.filter(l => l.status === SESSION_STATUS.CANCELLED);

    const response = {
      lessons: enrichedLessons,
      grouped: {
        upcoming: upcomingLessons,
        past: pastLessons,
        cancelled: cancelledLessons
      },
      stats: {
        total: enrichedLessons.length,
        upcoming: upcomingLessons.length,
        past: pastLessons.length,
        cancelled: cancelledLessons.length,
        completed: enrichedLessons.filter(l => l.status === SESSION_STATUS.COMPLETED).length
      },
      student_info: studentInfo,
      requester: {
        name: user.name,
        role: user.role,
        auth_method: user.auth_method
      },
      filters_applied: {
        user_id: targetUserId,
        status_filter,
        limit
      }
    };

    return res.status(200).json(response);

  } catch (error) {
    console.error('Unexpected error in student-lessons API:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–Ω—è—Ç–∏–π',
      details: error.message
    });
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
 */
function getStatusLabel(status) {
  const labels = {
    'planned': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
    'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–æ',
    'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
  };
  return labels[status] || status;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
 */
function getTypeLabel(type) {
  const labels = {
    'individual': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ',
    'pair': '–ü–∞—Ä–Ω–æ–µ',
    'group': '–ì—Ä—É–ø–ø–æ–≤–æ–µ'
  };
  return labels[type] || type;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å CSS –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
 */
function getStatusClass(status) {
  const classes = {
    'planned': 'status-planned',
    'confirmed': 'status-confirmed',
    'cancelled': 'status-cancelled',
    'completed': 'status-completed'
  };
  return classes[status] || 'status-unknown';
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
 */
function getStatusEmoji(status) {
  const emojis = {
    'planned': 'üìÖ',
    'confirmed': '‚úÖ',
    'cancelled': '‚ùå',
    'completed': '‚úÖ'
  };
  return emojis[status] || '‚ùì';
}